generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @db.ObjectId

    @@index([userId])
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?   @default("User")
    email         String?   @unique
    emailVerified DateTime?
    image         String?   @default("https://avatars.dicebear.com/api/open-peeps/your-custom-seed.svg")
    accounts      Account[]
    sessions      Session[]
    Cart          Cart[]
}

model Product {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    price       Float
    description String
    category    String
    image       String
    rating      Rating   @relation(fields: [ratingId], references: [id], onDelete: Cascade)
    ratingId    String   @db.ObjectId
    Cart        Cart[]   @relation(fields: [CartIds], references: [id])
    CartIds     String[] @db.ObjectId
    Order       Order[]  @relation(fields: [orderIds], references: [id])
    orderIds    String[] @db.ObjectId

    @@index([ratingId])
}

model Rating {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    rate    Float
    count   Int
    Product Product[]
}

model Cart {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    products   Product[] @relation(fields: [productIds], references: [id])
    productIds String[]  @db.ObjectId
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String    @db.ObjectId
    amount     Float     @default(0)

    @@index([userId])
}

model Order {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    userId     String    @db.ObjectId
    amount     Float
    products   Product[] @relation(fields: [productIds], references: [id])
    productIds String[]  @db.ObjectId
    createdAt  DateTime  @updatedAt
}
